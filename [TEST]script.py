# -*- coding: utf-8 -*-
import sqlite3
import telebot
import requests
import random
import os

from pygments.lexers import markup
from telebot import types
from cities_data import ALL_CITIES

BOT_TOKEN = os.getenv('8497728744:AAGUHaS9qE8vO4rKSw_yHeRn6VuZlmoChhQ')
bot = telebot.TeleBot('8497728744:AAGUHaS9qE8vO4rKSw_yHeRn6VuZlmoChhQ')
OWNER_ID = 8281653308

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
USED = []
GAME_ACTIVE = False
current_city = ""
first_text_trash = "–û–∫–µ–π —Ç–æ–≥–¥–∞ —è –Ω–∞—á–∏–Ω–∞—é - "


# –§—É–Ω–∫—Ü–∏–∏
def req(city):
    last_char = city[-1].lower()
    if last_char in ['—å', '—ä', '—ã']:
        return city[-2].lower()
    return last_char


@bot.message_handler(commands=['start'])
def start(message):
    global first_text_trash
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É", callback_data='order_service')
    btn2 = types.InlineKeyboardButton("‚≠ê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã", url='https://t.me/+-PQ71xNSddhmZjQ6')
    btn3 = types.InlineKeyboardButton("üéÆ –ú–∏–Ω–∏-–∏–≥—Ä–∞", callback_data='start_game')
    btn4 = types.InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url='https://www.donationalerts.com/r/s_gm')
    btn5 = types.InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')
    markup.add(btn1, btn2, btn3, btn4, btn5)

    welcome_text = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥."""
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    bot.answer_callback_query(call.id)

    if call.data == 'order_service':
        order_service(call.message)
    elif call.data == 'change_word':
        change_word(call.message)
    elif call.data == 'start_game':
        start_game(call.message)
    elif call.data == 'game_yes':
        game_yes(call.message)
    elif call.data == 'start':
        start(call.message)
    elif call.data == 'support':
        support(call.message)


def order_service(message):
    bot.send_message(message.chat.id, "üõçÔ∏è –§—É–Ω–∫—Ü–∏—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


def start_game(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("‚úÖ –î–∞", callback_data='game_yes', )
    btn2 = types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data='start')
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, "üéÆ –ü–æ–∏–≥—Ä–∞–µ–º –≤ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏?", reply_markup=markup)
def game_yes(message):
    global USED, GAME_ACTIVE, current_city, first_text_trash
    USED = []
    GAME_ACTIVE = True

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
    if hasattr(message, 'data') and message.data == 'game_yes':
        first_text_trash = "–í–æ—Ç –≤–∞—à–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ: "
    else:
        first_text_trash = "–û–∫–µ–π —Ç–æ–≥–¥–∞ —è –Ω–∞—á–∏–Ω–∞—é - "

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–æ", callback_data='change_word')
    markup.add(btn1)

    available_cities = [city for city in ALL_CITIES if city not in USED]
    current_city = random.choice(available_cities)
    USED.append(current_city)
    bot.send_message(message.chat.id,f"{first_text_trash}{current_city}. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã, –Ω–∞–ø–∏—à–∏ /exit", reply_markup=markup)
@bot.message_handler(func=lambda message: GAME_ACTIVE)
def all_messages(message):
    global USED, GAME_ACTIVE, current_city, first_text_trash

    first_text_trash = "–í–∞—à–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ: "
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start')
    btn2 = types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–æ", callback_data='game_yes')
    markup.add(btn1, btn2)

    user_message = message.text.strip().lower()

    if user_message == "/exit":
        USED = []
        GAME_ACTIVE = False
        bot.send_message(message.chat.id, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return
    elif user_message in USED:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –≥–æ—Ä–æ–¥", reply_markup=markup)
        return
    elif user_message.lower() not in [city.lower() for city in ALL_CITIES]:
        bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ. –í –º–æ–µ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥ –†–æ—Å—Å–∏–∏", reply_markup=markup)
        return
    elif user_message[0].lower() != req(current_city):
        bot.send_message(message.chat.id, f"–ë—É–∫–≤—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç! –ù—É–∂–Ω–∞ –±—É–∫–≤–∞ '{req(current_city)}'", reply_markup=markup)
        return

    # –ì–æ—Ä–æ–¥ –ø–æ–¥—Ö–æ–¥–∏—Ç
    USED.append(user_message)
    current_city = user_message

    # –ë–æ—Ç –¥–µ–ª–∞–µ—Ç —Ö–æ–¥
    required_letter = req(current_city)
    available_cities = [city for city in ALL_CITIES if city not in USED and city[0].lower() == required_letter]

    if not available_cities:
        bot.send_message(message.chat.id, f"–Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É '{required_letter}'. –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
        USED = []
        GAME_ACTIVE = False
        return

    bot_city = random.choice(available_cities)
    USED.append(bot_city)
    current_city = bot_city
    bot.send_message(message.chat.id,f"{bot_city}. –¢–µ–±–µ –Ω–∞ –±—É–∫–≤—É '{req(bot_city)}'. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã, –Ω–∞–ø–∏—à–∏ /exit", reply_markup=markup)
# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Å–ª–æ–≤–∞
def change_word(message):
    global USED, GAME_ACTIVE, current_city

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å —Å–ª–æ–≤–æ", callback_data='change_word')
    markup.add(btn1)

    available_cities = [city for city in ALL_CITIES if city not in USED]
    current_city = random.choice(available_cities)
    USED.append(current_city)

    bot.send_message(message.chat.id, f"–í–æ—Ç –≤–∞—à–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ: {current_city}. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã, –Ω–∞–ø–∏—à–∏ /exit", reply_markup=markup)

def support(message):
    bot.send_message(message.chat.id, "üí¨ –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞. none_stop=True –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —Å–±–æ–µ–≤.
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ GitVerse!")

    bot.polling(none_stop=True, interval=0)

